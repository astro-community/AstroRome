var l=(...[o={}])=>{Object.entries(o).forEach(([t,e])=>Object.defineProperty(o,t,{value:e===!0?n[t]:o[t]}));const{Path:r,Cache:p,Logger:c,Exclude:m,Action:u,Rome:f}=s(n,o),i=new Set;if(typeof r<"u"&&(Array.isArray(r)||r instanceof Set))for(const t of r)i.add(t);return{name:"astro-rome",hooks:{"astro:build:done":async({dir:t})=>{i.size||i.add(t);const e=await(await import("@rometools/js-api")).Rome.create({distribution:(await import("@rometools/js-api")).Distribution.NODE}),y=s(u,{Wrote:async a=>{try{return e.formatContent(a.Buffer.toString(),{filePath:(await import("path")).resolve(a.Input)}).content}catch{return a.Buffer}}});typeof f=="object"&&e&&(f.$schema=void 0,e.applyConfiguration(f));for(const a of i)await(await(await(await new(await import("files-pipe")).default(p,c).In(a)).By("**/*.{js,mjs,cjs,ts}")).Not(m)).Pipe(y)}}}};const{default:n}=await import("../Variable/Option.js"),{default:s}=await import("typescript-esbuild/Target/Function/Merge.js");export{n as Default,s as Merge,l as default};
